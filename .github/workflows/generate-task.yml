name: Generate New Task from Template

on:
  issues:
    types: [opened, reopened]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  generate-task:
    # Temporarily remove label condition to debug
    # if: contains(github.event.issue.labels.*.name, 'task-generation')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if this is a task generation request
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title;
            console.log('Issue title:', title);
            
            const isTaskRequest = title.startsWith('[NEW_TASK]');
            console.log('Starts with [NEW_TASK]:', isTaskRequest);
            
            if (!isTaskRequest) {
              console.log('⏭️ Skipping: Issue title does not start with [NEW_TASK]');
              core.setOutput('skip', 'true');
            } else {
              console.log('✅ Proceeding: This is a task generation request');
              core.setOutput('skip', 'false');
            }
            
            return {
              title: title,
              isTaskRequest: isTaskRequest,
              skip: !isTaskRequest
            };

      - name: Test action trigger
        if: steps.check.outputs.skip != 'true'
        run: |
          echo "✅ GitHub Action triggered successfully!"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue number: ${{ github.event.issue.number }}"
          echo "Issue labels: ${{ join(github.event.issue.labels.*.name, ', ') }}"

      - name: Comment with file location
        if: steps.check.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## � GitHub Action Debug Information
            
            ✅ **Action Successfully Triggered!**
            
            **Issue Details:**
            - **Title**: ${{ github.event.issue.title }}
            - **Number**: #${{ github.event.issue.number }}
            - **Labels**: ${{ join(github.event.issue.labels.*.name, ', ') }}
            - **Author**: @${{ github.event.issue.user.login }}
            
            **Next Steps:**
            This is a debug version of the action. The full task generation functionality will be implemented next.
            
            **Issue Body Preview (first 500 chars):**
            \`\`\`
            ${context.payload.issue.body.substring(0, 500)}
            \`\`\`
            
            ---
            *If you see this comment, the GitHub Action is working correctly!*
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Parse issue data and generate file
        if: steps.check.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Parse issue body to extract form data
            const issueBody = context.payload.issue.body;
            console.log('Issue body:', issueBody);
            
            // Function to extract field values from GitHub issue form
            function extractField(body, fieldLabel) {
              const patterns = [
                new RegExp(`### ${fieldLabel}\\s*\\n\\s*([^\\n#]+)`, 'i'),
                new RegExp(`\\*\\*${fieldLabel}\\*\\*:?\\s*([^\\n]+)`, 'i')
              ];
              
              for (const pattern of patterns) {
                const match = body.match(pattern);
                if (match && match[1] && match[1].trim() !== '_No response_') {
                  return match[1].trim();
                }
              }
              return '';
            }
            
            // Extract all relevant fields from the issue
            const title = context.payload.issue.title.replace(/^\[NEW_TASK\]\s*/, '').trim();
            const folderName = extractField(issueBody, 'Task Folder Name') || 'new-task-folder';
            const fileName = extractField(issueBody, 'Output File Name') || 'index';
            
            // Extract content fields
            const taskTitle = extractField(issueBody, 'Task Title') || title;
            const instructions = extractField(issueBody, 'Task Instructions') || 'Select the 3 most relevant options from the 9 choices below that best address the task requirements. Submit your selection to receive immediate feedback.';
            const companyName = extractField(issueBody, 'Company/Business Name') || 'Sample Company - Demo business for testing';
            const customerBase = extractField(issueBody, 'Customer Base') || 'Demo customers and users';
            const solutionGoal = extractField(issueBody, 'Solution Goal') || 'Demonstrate the task generation system';
            
            // Extract all 9 options
            const options = {};
            for (let i = 1; i <= 9; i++) {
              options[`option${i}_title`] = extractField(issueBody, `Option ${i} Title`) || `Option ${i} Title`;
              options[`option${i}_desc`] = extractField(issueBody, `Option ${i} Description`) || `Description for option ${i}`;
            }
            
            console.log('Parsed fields:', {
              folderName, fileName, taskTitle, companyName, customerBase, solutionGoal, options
            });
            
            // Create the folder structure: tasks/folder-name/
            const outputDir = `tasks/${folderName}`;
            const outputFile = `${fileName}.html`;
            
            // Create directory if it doesn't exist
            if (!fs.existsSync(outputDir)) {
              fs.mkdirSync(outputDir, { recursive: true });
            }
            
            // Read template
            const templatePath = 'docs/template-task.html';
            let templateContent = fs.readFileSync(templatePath, 'utf8');
            
            // Replace template placeholders with extracted data
            templateContent = templateContent
              .replace(/\{\{task_title\}\}/g, taskTitle)
              .replace(/\{\{company_name\}\}/g, companyName)
              .replace(/\{\{customer_base\}\}/g, customerBase)
              .replace(/\{\{solution_goal\}\}/g, solutionGoal)
              .replace(/\{\{instructions\}\}/g, instructions);
            
            // Replace all option placeholders with extracted data
            for (let i = 1; i <= 9; i++) {
              templateContent = templateContent
                .replace(new RegExp(`\\{\\{option${i}_title\\}\\}`, 'g'), options[`option${i}_title`])
                .replace(new RegExp(`\\{\\{option${i}_desc\\}\\}`, 'g'), options[`option${i}_desc`]);
            }
            
            // Write the generated file
            const fullPath = path.join(outputDir, outputFile);
            fs.writeFileSync(fullPath, templateContent);
            
            console.log(`Generated file: ${fullPath}`);
            
            return {
              fileName: outputFile,
              filePath: fullPath,
              folderName: folderName,
              outputDir: outputDir
            };

      - name: Commit generated file
        if: steps.check.outputs.skip != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add tasks/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate new task: ${{ github.event.issue.title }}"
            git push
          fi

      - name: Add completion label
        if: steps.check.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['action-completed']
            });

      - name: Comment on skipped issues
        if: steps.check.outputs.skip == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## ⏭️ GitHub Action Skipped
            
            This issue was skipped because the title doesn't start with \`[NEW_TASK]\`.
            
            **Issue Details:**
            - **Title**: ${{ github.event.issue.title }}
            
            **To trigger task generation:**
            1. Edit the issue title to start with \`[NEW_TASK]\`
            2. Or create a new issue with title starting with \`[NEW_TASK]\`
            3. Use the issue form template to provide all required information
            
            **Example title:** \`[NEW_TASK] Business Process Optimization Task\`
            
            ---
            *This comment confirms the GitHub Action is working but skipped this issue.*
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });